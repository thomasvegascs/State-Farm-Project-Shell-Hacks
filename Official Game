<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1.0"/>
<title>Policy Hero — Level 1</title>
<link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet"/>
<style>
  html,body{margin:0;height:100%;background:#0e0f12}
  #game{width:100%;height:100%;display:flex;align-items:center;justify-content:center}
  canvas{image-rendering:pixelated;image-rendering:crisp-edges}
  .legend{position:fixed;left:8px;bottom:8px;font-family:"Press Start 2P",monospace;font-size:10px;color:#cfe6ff;opacity:.9;background:rgba(0,0,0,.35);padding:6px 8px;border:1px solid #2a3240;border-radius:6px}
</style>
<script src="https://cdn.jsdelivr.net/npm/phaser@3.80.0/dist/phaser.min.js"></script>
</head>
<body>
<div id="game"></div>
<div class="legend">← → move | ↑ ↓ stairs (near) | A action/Yes | S No | R restart</div>

<script>
(() => {
/* =========================
   Config & constants
========================= */
const Config = {
  WIDTH: 960, HEIGHT: 540,
  HOUSE_X: 200, HOUSE_Y: 120, HOUSE_W: 560, HOUSE_H: 320,
  PLAYER_SPEED: 160, BULLET_SPEED: 380,
  ENEMY_BASE_SPEED: 34, ENEMY_STRONG_SPEED: 52,
  HOUSE_MAX_HP: 100,
  PREP_SECONDS: 20, REST_SECONDS: 10,
  HOLD_MS: 2500,
  COLORS: {
    bg:'#0e0f12', ground:0x101613, houseFill:0x1b1e24, houseStroke:0x4c566a,
    barBg:0x2e3440, houseBar:'#a3be8c', insBar:'#81a1c1', countdown:'#ff5c66',
    door:0x6b8fb1, win:0x91d0e0, stove:0x3b4252, chest:0xd08770
  }
};
Config.GROUND_Y = Config.HOUSE_Y + Config.HOUSE_H - 6;
Config.UPPER_FLOOR_Y = Config.HOUSE_Y + Math.floor(Config.HOUSE_H / 2);
const FLOOR_Y = { ground: Config.GROUND_Y, upper: Config.UPPER_FLOOR_Y };
const STATES = { REST:'rest', PREP:'prep', PLAY:'play', BLAST:'blast', OVER:'over', COMPLETE:'complete' };
const SIZES = { DOOR_W:44, DOOR_H:98, WIN_W:60, WIN_H:50, STOVE_W:42, STOVE_H:30, CHEST_W:42, CHEST_H:40 };
const ZONES = {
  LEFT_DOOR:    { left: Config.HOUSE_X,                        w: SIZES.DOOR_W, floor:'ground', label:'[Hold A] Lock door' },
  RIGHT_WINDOW: { left: Config.HOUSE_X + Config.HOUSE_W - SIZES.WIN_W, w: SIZES.WIN_W, floor:'ground', label:'[Hold A] Lock window' },
  STOVE:        { left: Config.HOUSE_X + Math.floor((Config.HOUSE_W - SIZES.STOVE_W)/2) - 70, w: SIZES.STOVE_W, floor:'ground', label:'[A] Turn off stove' },
  GUN_CHEST:    { left: Config.HOUSE_X + Math.floor((Config.HOUSE_W - SIZES.CHEST_W)/2) + 70, w: SIZES.CHEST_W, floor:'upper', label:'[A] Equip gun' },
  STAIRS:       { left: Config.HOUSE_X + Math.floor((Config.HOUSE_W - 120)/2), w: 120, floor:'ground', label:'Stairs' }
};
const PLAYER_MIN_X = Config.HOUSE_X + 6;
const PLAYER_MAX_X = Config.HOUSE_X + Config.HOUSE_W - 6;
const px = n => Math.round(n);

/* =========================
   Tiny SFX
========================= */
const Audio = (()=> {
  const Ctx = window.AudioContext || window.webkitAudioContext; let ctx; try{ ctx=new Ctx(); }catch{ ctx=null; }
  function tone({freq=440,dur=.12,type='sine',gain=.08,attack=.005,release=.05}={}) {
    if(!ctx) return; const o=ctx.createOscillator(), g=ctx.createGain(); o.type=type; o.frequency.value=freq; g.gain.value=0.00001;
    o.connect(g); g.connect(ctx.destination); const t=ctx.currentTime;
    g.gain.exponentialRampToValueAtTime(gain,t+attack);
    g.gain.exponentialRampToValueAtTime(0.00001,t+attack+dur+release);
    o.start(t); o.stop(t+attack+dur+release+0.02);
  }
  return {
    countdown(){ tone({freq:740,dur:.06,type:'square',gain:.06}); },
    task(){ tone({freq:880,dur:.12,type:'triangle',gain:.08}); },
    correct(){ tone({freq:900,dur:.15,type:'square',gain:.09}); tone({freq:1200,dur:.12,type:'triangle',gain:.07}); },
    wrong(){ tone({freq:220,dur:.18,type:'square',gain:.09}); },
    wave(){ tone({freq:220,dur:.18,type:'sawtooth',gain:.08}); },
    damage(){ tone({freq:140,dur:.08,type:'square',gain:.09}); },
    blast(){ tone({freq:330,dur:.35,type:'sawtooth',gain:.10}); setTimeout(()=>tone({freq:660,dur:.25,type:'triangle',gain:.08}),120); }
  };
})();

/* =========================
   Generated textures
========================= */
function makeGeneratedTextures(scene){
  // Player frames
  const mkP = (l=0,r=0)=>{
    const g = scene.add.graphics();
    g.fillStyle(0x3b4252,1).fillRect(3,0,8,2);            // hair
    g.fillStyle(0xeceff4,1).fillRect(4,2,6,5);            // face
    g.fillStyle(0xd24d57,1).fillRect(2,7,10,6);           // red shirt
    g.fillStyle(0x88c0d0,1).fillRect(4,13,6,2);           // belt line
    g.fillStyle(0x6b4c2e,1).fillRect(3,15,8,8);           // pants
    if (l) g.fillRect(1,16,6,7);
    if (r) g.fillRect(7,16,6,7);
    g.fillStyle(0x8b5a2b,1).fillRect(2,23,4,3).fillRect(8,23,4,3); // shoes
    scene.add.renderTexture(0,0,14,28).draw(g,0,0).saveTexture(l?'p1':r?'p2':'p0');
  };
  mkP(0,0); mkP(1,0); mkP(0,1);

  // Enemy burglar (striped)
  const e = scene.add.graphics();
  e.fillStyle(0x1a1c22,1).fillRect(0,0,18,22);
  for (let y=4;y<=18;y+=4) e.fillStyle(0xffffff,1).fillRect(0,y,18,2);
  e.fillStyle(0x000000,1).fillRect(2,6,14,4);            // mask band
  e.fillStyle(0xeceff4,1).fillRect(4,7,3,2).fillRect(11,7,3,2); // eyes
  scene.add.renderTexture(0,0,18,22).draw(e,0,0).saveTexture('enemy'); e.destroy();

  // Bullet + muzzle flash + shadow
  const b=scene.add.graphics(); b.fillStyle(0xebcb8b,1).fillRect(0,0,6,2);
  scene.add.renderTexture(0,0,6,2).draw(b,0,0).saveTexture('bullet'); b.destroy();
  const mf=scene.add.graphics(); mf.fillStyle(0xfff2a8,1).fillRect(0,0,3,3); mf.fillStyle(0xffdd66,1).fillRect(1,-1,1,5).fillRect(-1,1,5,1);
  scene.add.renderTexture(0,0,3,3).draw(mf,0,0).saveTexture('muzzle'); mf.destroy();
  const sh = scene.add.graphics(); sh.fillStyle(0x000000,0.25).fillEllipse(0,0,14,4);
  scene.add.renderTexture(0,0,16,8).draw(sh,8,4).saveTexture('shadow'); sh.destroy();

  // Props
  const d=scene.add.graphics();
  d.fillStyle(0x6b8fb1,1).fillRect(0,0,44,98).lineStyle(2,0x2e3440,1).strokeRect(0,0,44,98);
  d.lineStyle(1,0x2e3440,1).strokeRect(6,10,32,22).strokeRect(6,38,32,22).strokeRect(6,66,32,22);
  d.fillStyle(0xebcb8b,1).fillRect(36,50,4,4);
  scene.add.renderTexture(0,0,44,98).draw(d,0,0).saveTexture('door_detail'); d.destroy();

  const w=scene.add.graphics();
  w.fillStyle(0x91d0e0,1).fillRect(0,0,60,50).lineStyle(2,0x2e3440,1).strokeRect(0,0,60,50);
  w.lineStyle(1,0x2e3440,1).lineBetween(0,25,60,25).lineBetween(30,0,30,50);
  scene.add.renderTexture(0,0,60,50).draw(w,0,0).saveTexture('win_detail'); w.destroy();

  const st=scene.add.graphics();
  st.fillStyle(0x3b4252,1).fillRect(0,0,42,30).fillStyle(0x2e3440,1).fillRect(2,2,38,10);
  st.lineStyle(1,0x2e3440,1).strokeRect(0,0,42,30);
  st.fillStyle(0x4c566a,1).fillRect(4,14,14,10).fillRect(24,14,14,10);
  scene.add.renderTexture(0,0,42,30).draw(st,0,0).saveTexture('stove_body'); st.destroy();

  const rg=scene.add.graphics();
  rg.fillStyle(0x66ff66,1).fillRect(0,8,22,6).fillStyle(0x3ed13e,1).fillRect(6,4,12,4);
  rg.fillStyle(0xb48ead,1).fillRect(20,9,6,4).fillStyle(0xd08770,1).fillRect(6,15,6,4);
  rg.lineStyle(1,0x2e3440,1).strokeRect(0,8,22,6).strokeRect(20,9,6,4).strokeRect(6,15,6,4);
  scene.add.renderTexture(0,0,28,22).draw(rg,0,0).saveTexture('raygun'); rg.destroy();

  const sp=scene.add.graphics(); sp.fillStyle(0xffffff,1).fillRect(1,0,1,1).fillRect(0,1,3,1).fillRect(1,2,1,1);
  scene.add.renderTexture(0,0,3,3).draw(sp,0,0).saveTexture('sparkle'); sp.destroy();

  const ch=scene.add.graphics();
  ch.fillStyle(0xd08770,1).fillRect(0,0,42,40).lineStyle(2,0x2e3440,1).strokeRect(0,0,42,40);
  ch.fillStyle(0xeacb8b,1).fillRect(20,18,2,6);
  scene.add.renderTexture(0,0,42,40).draw(ch,0,0).saveTexture('chest'); ch.destroy();
}

/* =========================
   Utilities
========================= */
function lerpColorInt(c1,c2,t){
  const a=Phaser.Display.Color.IntegerToColor(c1), b=Phaser.Display.Color.IntegerToColor(c2);
  const c=Phaser.Display.Color.Interpolate.ColorWithColor(a,b,100,Math.floor(t*100));
  return Phaser.Display.Color.GetColor(c.r,c.g,c.b);
}

/* =========================
   UI (HUD, tooltips, quiz, hold bar)
========================= */
const UI = {
  init(scene){
    this.countdownText = scene.add.text(Config.WIDTH/2, 24, '', {
      fontFamily:'"Press Start 2P", monospace', fontSize:'28px', color: Config.COLORS.countdown
    }).setOrigin(0.5,0).setStroke('#000',4);

    this.taskBG = scene.add.rectangle(16,112,340,120,0xffffff,0.05).setOrigin(0,0).setStrokeStyle(1,0x2a3240,1);
    this.taskText = scene.add.text(24,120,'',{fontFamily:'"Press Start 2P",monospace',fontSize:'10px',color:'#cfe6ff'}).setOrigin(0,0).setStroke('#000',2);

    const bx = Config.WIDTH-360, by = 120;
    this.houseBar = this.makeBar(scene,bx,by,300,12,Config.COLORS.houseBar,'House');
    this.insBar   = this.makeBar(scene,bx,by+34,300,12,Config.COLORS.insBar,'Insurance');
    this.setBar(this.houseBar,100,'House');
    this.setBar(this.insBar,0,'Insurance');

    this.waveText = scene.add.text(Config.WIDTH-10,18,'',{fontFamily:'"Press Start 2P",monospace',fontSize:'10px',color:'#e5e9f0'}).setOrigin(1,0).setStroke('#000',3);

    this.tooltips=[];
    const tip=(x,y,t)=>{ const glow=scene.add.rectangle(x,y,140,20,0xffffff,0.10).setOrigin(0.5); scene.tweens.add({targets:glow,alpha:0.3,yoyo:true,repeat:-1,duration:700});
      const tx=scene.add.text(x,y,t,{fontFamily:'"Press Start 2P",monospace',fontSize:'9px',color:'#fff'}).setOrigin(0.5);
      this.tooltips.push({glow,tip:tx}); };
    tip(ZONES.LEFT_DOOR.left + SIZES.DOOR_W/2,   FLOOR_Y.ground - SIZES.DOOR_H - 10, '[Hold A] Lock door');
    tip(ZONES.RIGHT_WINDOW.left + SIZES.WIN_W/2, FLOOR_Y.ground - SIZES.WIN_H - 10,  '[Hold A] Lock window');
    tip(ZONES.STOVE.left + SIZES.STOVE_W/2,      FLOOR_Y.ground - SIZES.STOVE_H - 10,'[A] Turn off stove');
    tip(ZONES.GUN_CHEST.left + SIZES.CHEST_W/2,  FLOOR_Y.upper  - SIZES.CHEST_H - 10,'[A] Equip gun');
    this.setPrepIndicators(false);

    this.quizUI=null;
    this.holdBar=null;
  },
  makeBar(scene,x,y,w,h,colorHex,label){
    const bg=scene.add.rectangle(x,y,w,h,Config.COLORS.barBg).setOrigin(0,0);
    const fg=scene.add.rectangle(x,y,w,h,Phaser.Display.Color.HexStringToColor(colorHex).color).setOrigin(0,0);
    const tx=scene.add.text(x+w-6,y-14,`${label}: 100%`,{fontFamily:'"Press Start 2P",monospace',fontSize:'10px',color:'#e5e9f0'}).setOrigin(1,0);
    return {bg,fg,tx,w,x,y,h};
  },
  setBar(bar,pct,label){
    const v=Math.max(0,Math.min(100,pct));
    bar.fg.width=bar.w*(v/100); bar.tx.setText(`${label}: ${v|0}%`); bar.tx.x=bar.x+bar.w-6;
  },
  setCountdown(template, seconds, onDone){
    const sc=this.countdownText.scene;
    const tick=()=>{ this.countdownText.setText(template.replace('{s}',seconds)); Audio.countdown(); seconds--;
      if(seconds<0){ this.countdownText.setText(''); onDone&&onDone(); return; }
      sc.time.delayedCall(1000,tick);
    }; tick();
  },
  setWave(n){ this.waveText.setText(`Wave ${n}`); },
  setTasksText(t){ this.taskText.setText(t); },
  setPrepIndicators(v){ (this.tooltips||[]).forEach(({glow,tip})=>{ glow.setVisible(v); tip.setVisible(v); }); },
  flashTask(){
    const s=this.taskText.scene;
    this.taskBG.setFillStyle(0xa3be8c,0.15);
    s.tweens.add({targets:[this.taskBG],alpha:{from:0.15,to:0.05},duration:320,yoyo:true,
      onComplete:()=>this.taskBG.setFillStyle(0xffffff,0.05)});
  },

  showQuiz(scene, qObj){
    this.hideQuiz();
    const pad=12, maxW=560, x=Config.WIDTH/2, y=Config.HEIGHT/2;
    const title = `QUIZ: ${qObj.q}`;
    const left  = `A — Yes`;
    const right = `S — No`;
    const hint  = 'Answers unlock after 3s';

    const tTitle = scene.add.text(0,0,title,{fontFamily:'"Press Start 2P",monospace',fontSize:'12px',color:'#1b1e24',align:'center',wordWrap:{width:maxW}}).setOrigin(0.5);
    const tLeft  = scene.add.text(0,0,left, {fontFamily:'"Press Start 2P",monospace',fontSize:'11px',color:'#1b1e24'}).setOrigin(1,0.5);
    const tRight = scene.add.text(0,0,right,{fontFamily:'"Press Start 2P",monospace',fontSize:'11px',color:'#1b1e24'}).setOrigin(0,0.5);
    const tHint  = scene.add.text(0,0,hint,{fontFamily:'"Press Start 2P",monospace',fontSize:'9px',color:'#4c566a'}).setOrigin(0.5);

    const innerW = Math.max(tTitle.width, tLeft.width + 24 + tRight.width);
    const w=Math.min(maxW, innerW + pad*2);
    const h=tTitle.height + 28 + pad*2 + 16;

    const g=scene.add.graphics();
    g.fillStyle(0xffffff,0.97).fillRect(-w/2,-h/2,w,h);
    g.lineStyle(3,0x2e3440,1).strokeRect(-w/2,-h/2,w,h);
    const c=scene.add.container(x,y); c.add(g);

    tTitle.y = -h/2 + pad + tTitle.height/2; c.add(tTitle);

    const midY = tTitle.y + tTitle.height/2 + 18;
    tLeft.x = -8;  tLeft.y = midY;
    tRight.x = 8;  tRight.y = midY;
    c.add(tLeft); c.add(tRight);

    tHint.y = midY + 16; c.add(tHint);

    c.setScale(0.85); c.setAlpha(0);
    scene.tweens.add({targets:c,scale:1,alpha:1,duration:200,ease:'Quad.easeOut'});
    this.quizUI = {container:c};
  },
  hideQuiz(){ if(!this.quizUI) return; const c=this.quizUI.container; this.quizUI=null; c.scene.tweens.add({targets:c,alpha:0,duration:140,onComplete:()=>c.destroy()}); },

  showHoldProgress(x, topY){
    this.hideHoldProgress();
    const scene=this.taskText.scene, W=64,H=8;
    const bg=scene.add.rectangle(x-W/2, topY-16, W, H, 0x111111, 0.6).setOrigin(0,0).setDepth(10);
    const fg=scene.add.rectangle(x-W/2+2, topY-14, 0, H-4, 0xa3be8c,1).setOrigin(0,0).setDepth(10);
    fg.maxW = W-4; this.holdBar={bg,fg};
  },
  updateHoldProgress(r){ if(!this.holdBar) return; this.holdBar.fg.width=Math.max(0,Math.min(1,r))*this.holdBar.fg.maxW; },
  hideHoldProgress(){ if(!this.holdBar) return; this.holdBar.bg.destroy(); this.holdBar.fg.destroy(); this.holdBar=null; }
};

/* =========================
   Quiz bank (Yes/No)
========================= */
const QUIZ = [
  { q:"Does home insurance usually help fix your house after a fire?", ans:true },
  { q:"Is flood from rivers covered by standard home insurance?", ans:false },
  { q:"Can liability coverage help if a guest is injured at your home?", ans:true },
  { q:"Is your deductible the amount the insurer pays first?", ans:false },
  { q:"Should you take photos of belongings to speed up claims?", ans:true },
  { q:"Do smoke alarms sometimes earn discounts on premiums?", ans:true },
  { q:"Does market price of your home decide coverage limits?", ans:false },
  { q:"Should you tell your insurer after a major remodel?", ans:true },
  { q:"Do policies always cover damage from normal wear and tear?", ans:false },
  { q:"Can Additional Living Expense help pay for temporary housing?", ans:true }
];
function shuffled(arr){ const a=[...arr]; for(let i=a.length-1;i>0;i--){ const j=(Math.random()*(i+1))|0; [a[i],a[j]]=[a[j],a[i]]; } return a; }

/* =========================
   Tasks (with hold-to-lock)
========================= */
const Tasks = {
  state:{ stove:false, leftDoor:false, rightWindow:false, gun:false },
  hold:{ active:false,target:null, startedAt:0 },

  text(){
    const em=b=>b?'✅':'⬜';
    return [
      `${em(this.state.stove)} Turn OFF stove`,
      `${em(this.state.leftDoor)} Lock LEFT door`,
      `${em(this.state.rightWindow)} Lock RIGHT window`,
      `${em(this.state.gun)} Equip Mystery Gun`
    ].join('\n');
  },
  near(p,Z){ return p.y===FLOOR_Y[Z.floor]-14 && (p.x>=Z.left && p.x<=Z.left+Z.w); },

  begin(scene, p){
    if(!this.state.stove && this.near(p,ZONES.STOVE)){ this.state.stove=true; stopStoveFlame(); UI.setTasksText(this.text()); UI.flashTask(); Audio.task(); return; }
    if(!this.state.gun && this.near(p,ZONES.GUN_CHEST)){ this.state.gun=true; Game.hasGun=true; hideRaygunPickup(); UI.setTasksText(this.text()); UI.flashTask(); Audio.task(); return; }
    if(!this.state.leftDoor && this.near(p,ZONES.LEFT_DOOR)){ this.startHold(scene,'leftDoor', ZONES.LEFT_DOOR.left+SIZES.DOOR_W/2, FLOOR_Y.ground-SIZES.DOOR_H); return; }
    if(!this.state.rightWindow && this.near(p,ZONES.RIGHT_WINDOW)){ this.startHold(scene,'rightWindow', ZONES.RIGHT_WINDOW.left+SIZES.WIN_W/2, FLOOR_Y.ground-SIZES.WIN_H); return; }
  },
  startHold(scene,target,cx,topY){ this.hold.active=true; this.hold.target=target; this.hold.startedAt=scene.time.now; UI.showHoldProgress(cx,topY); },
  cancelHold(){ if(!this.hold.active) return; this.hold.active=false; this.hold.target=null; UI.hideHoldProgress(); },
  tick(scene,p){
    if(!this.hold.active) return;
    const stay = this.hold.target==='leftDoor'   ? this.near(p,ZONES.LEFT_DOOR)
               : this.hold.target==='rightWindow'? this.near(p,ZONES.RIGHT_WINDOW) : false;
    if(!Game.keyA.isDown || !stay){ this.cancelHold(); return; }
    const elapsed=scene.time.now-this.hold.startedAt; const r=Math.min(1,elapsed/Config.HOLD_MS); UI.updateHoldProgress(r);
    if(elapsed>=Config.HOLD_MS){
      if(this.hold.target==='leftDoor'){ this.state.leftDoor=true; if(Game.sprites.door) Game.sprites.door.setVisible(false); }
      else { this.state.rightWindow=true; if(Game.sprites.window) Game.sprites.window.setVisible(false); }
      this.cancelHold(); UI.setTasksText(this.text()); UI.flashTask(); Audio.task();
    }
  }
};

/* =========================
   Entities, Waves, Combat, Effects
========================= */
const Entities = {
  makePlayer(scene){
    const p=scene.physics.add.sprite(px(Config.HOUSE_X+Config.HOUSE_W/2), FLOOR_Y.ground-14, 'p0');
    p.body.setSize(14,28);
    if(!scene.anims.exists('walk')) scene.anims.create({key:'walk',frames:[{key:'p1'},{key:'p0'},{key:'p2'},{key:'p0'}],frameRate:8,repeat:-1});
    return p;
  },
  makeEnemy(scene,x,y){ const e=scene.physics.add.sprite(x,y,'enemy'); e.setDepth(2); return e; }
};

const Waves = {
  number:1, inProgress:false,
  start(scene){
    if(this.inProgress || Game.state!==STATES.PLAY) return;
    this.inProgress=true; UI.setWave(this.number);
    const n=Math.min(1+this.number,8);
    for(let i=0;i<n;i++){
      const side=Math.random()<0.5?'left':'right';
      const base = (i%3===0)? Config.ENEMY_STRONG_SPEED : Config.ENEMY_BASE_SPEED+Math.random()*16;
      const speed = base * Game.enemySpeedMult;
      const hp = ((i%3===0)?3:2) * Game.enemyHpMult;
      this.spawn(scene,side,speed,hp);
    }
    scene.time.addEvent({delay:400,loop:true,callback:()=>{
      if(Game.state===STATES.PLAY && Game.enemies.countActive(true)===0){
        this.inProgress=false; this.number++; Game.startRest('between');
      }
    }});
  },
  spawn(scene,side,speed,hp){ const y=FLOOR_Y.ground, x=side==='left'?-40:Config.WIDTH+40; const e=Entities.makeEnemy(scene,x,y); e.side=side; e.speed=speed; e.hp=hp; Game.enemies.add(e); }
};

const Combat = {
  shoot(scene){
    if(!Game.hasGun) return;
    const p=Game.player;
    const leftWin  = p.y===FLOOR_Y.upper-14 && p.x < (Config.HOUSE_X+Config.HOUSE_W/2-80);
    const rightWin = p.y===FLOOR_Y.upper-14 && p.x > (Config.HOUSE_X+Config.HOUSE_W/2+80);
    if(!(leftWin||rightWin)) return;

    let target=null; const list=Game.enemies.getChildren();
    if(list.length){
      const filter = leftWin ? e=>e.x<p.x : e=>e.x>p.x;
      const cands=list.filter(filter);
      if(cands.length) target=cands.reduce((a,b)=> (Math.abs(b.x-p.x)<Math.abs(a.x-px)?b:a));
    }

    const spd=Config.BULLET_SPEED; let vx,vy;
    if(target){ const sx=p.x, sy=p.y-10, dx=target.x-sx, dy=target.y-sy, L=Math.hypot(dx,dy)||1; vx=(dx/L)*spd; vy=(dy/L)*spd; }
    else { const dir=leftWin?-1:1; vx=dir*spd; vy=0; }

    const b=Game.bullets.create(p.x,p.y-10,'bullet'); b.body.allowGravity=false; b.setVelocity(vx,vy);
    scene.time.delayedCall(1500,()=>b.destroy());
    const mf=scene.add.image(p.x+(vx>0?6:-6),p.y-10,'muzzle').setScale(1.2);
    scene.tweens.add({targets:mf,alpha:{from:1,to:0},duration:120,onComplete:()=>mf.destroy()});
  }
};

const Effects = {
  shock:{active:false,r:0,maxR:0,gfx:null},
  trigger(scene){
    Game.state=STATES.BLAST; Game.insurancePct=100; UI.setBar(UI.insBar,100,'Insurance');
    const s=this.shock; s.active=true; s.r=0; s.maxR=Math.hypot(Config.WIDTH,Config.HEIGHT); s.gfx&&s.gfx.destroy(); s.gfx=scene.add.graphics({x:0,y:0});
    const cx=Config.HOUSE_X+Config.HOUSE_W/2, cy=Config.HOUSE_Y+Config.HOUSE_H/2;
    const step=()=>{ if(!s.active) return; s.r+=28; s.gfx.clear(); s.gfx.lineStyle(6,0xa3be8c,0.9).strokeCircle(px(cx),px(cy),px(s.r));
      Game.enemies.getChildren().forEach(e=>{ const d=Phaser.Math.Distance.Between(e.x,e.y,cx,cy); if(d<=s.r) e.destroy(); });
      if(s.r<s.maxR) scene.time.delayedCall(16,step);
    }; step();
    scene.time.delayedCall(3000,()=>{ s.active=false; s.gfx&&s.gfx.destroy(); Game.state=STATES.COMPLETE; Game.endLevelText(scene); });
  }
};

/* =========================
   World (sky/ground/house/stairs/props)
========================= */
let stoveFlameTween=null, stoveFlame=null, raygunPickup=null, sparkleTimer=null;

function drawHouse(scene){
  const g=scene.add.graphics();
  // sky gradient (pink->purple) + stars
  const top=Phaser.Display.Color.HexStringToColor('#ff7ab6').color, bot=Phaser.Display.Color.HexStringToColor('#2b0a3d').color;
  const bands=24, bh=Math.ceil(Config.HEIGHT/bands);
  for(let i=0;i<bands;i++){ const col=lerpColorInt(top,bot,i/(bands-1)); g.fillStyle(col,1).fillRect(0,i*bh,Config.WIDTH,bh); }
  for(let s=0;s<90;s++){ const sx=Phaser.Math.Between(6,Config.WIDTH-6), sy=Phaser.Math.Between(6,Math.floor(Config.HEIGHT/3)), a=Phaser.Math.FloatBetween(0.6,1); g.fillStyle(0xffffff,a).fillRect(sx,sy,2,2); }

  // ground grass + dirt gradient + fossil
  const grassH=18, dirtTopY=Config.GROUND_Y+2+grassH;
  g.fillStyle(0x2a6f37,1).fillRect(0,Config.GROUND_Y+2,Config.WIDTH,grassH);
  for(let x=0;x<Config.WIDTH;x+=6){ g.fillStyle(0x3a8f47,1).fillRect(x,Config.GROUND_Y+2,3,2); }
  const dirtTop=Phaser.Display.Color.HexStringToColor('#c98f52').color, dirtBot=Phaser.Display.Color.HexStringToColor('#4b2e1c').color;
  const dirtH=Config.HEIGHT-dirtTopY, dBands=Math.max(12,Math.floor(dirtH/10)), dBH=Math.ceil(dirtH/dBands);
  for(let i=0;i<dBands;i++){ const col=lerpColorInt(dirtTop,dirtBot,i/(dBands-1)); g.fillStyle(col,1).fillRect(0,dirtTopY+i*dBH,Config.WIDTH,dBH); }
  const fx=Config.HOUSE_X+Math.floor(Config.HOUSE_W*0.55), fy=dirtTopY+40;
  g.fillStyle(0xf0e1c2,0.85).fillRect(fx,fy,14,10).fillRect(fx+12,fy+4,4,3);
  for(let i=0;i<8;i++) g.fillRect(fx-2-i*6, fy+6+Math.floor(i/2), 5, 2);

  // house body
  g.lineStyle(4,Config.COLORS.houseStroke,1).fillStyle(Config.COLORS.houseFill,1);
  g.fillRect(Config.HOUSE_X,Config.HOUSE_Y,Config.HOUSE_W,Config.HOUSE_H);
  g.strokeRect(Config.HOUSE_X,Config.HOUSE_Y,Config.HOUSE_W,Config.HOUSE_H);

  // roof + chimney + details
  const roofH=56;
  g.fillStyle(0x313743,1).beginPath();
  g.moveTo(Config.HOUSE_X-6,Config.HOUSE_Y); g.lineTo(Config.HOUSE_X+Config.HOUSE_W+6,Config.HOUSE_Y);
  g.lineTo(Config.HOUSE_X+Config.HOUSE_W/2,Config.HOUSE_Y-roofH); g.closePath(); g.fillPath(); g.lineStyle(3,0x262b34,1).strokePath();
  g.fillStyle(0x2a303b,1).fillRect(Config.HOUSE_X+Config.HOUSE_W-84,Config.HOUSE_Y-roofH+12,18,34);

  // bricks + divider
  g.fillStyle(0x232833,1);
  for(let y=Config.HOUSE_Y+14;y<Config.HOUSE_Y+Config.HOUSE_H;y+=22) for(let x=Config.HOUSE_X+12;x<Config.HOUSE_X+Config.HOUSE_W-12;x+=28) g.fillRect(x,y,6,2);
  g.lineStyle(2,0x2e3440,1).lineBetween(Config.HOUSE_X,Config.UPPER_FLOOR_Y,Config.HOUSE_X+Config.HOUSE_W,Config.UPPER_FLOOR_Y);

  // STAIRWELL (wide wooden with dark well)
  const wellW = Math.min(96, ZONES.STAIRS.w - 8);
  const wellX = ZONES.STAIRS.left + (ZONES.STAIRS.w - wellW)/2;
  const wellY = Config.UPPER_FLOOR_Y;
  const wellH = (Config.GROUND_Y - wellY);
  g.fillStyle(0x0b0f14, 0.92).fillRect(px(wellX), px(wellY), px(wellW), px(wellH));
  g.fillStyle(0x000000, 0.25)
   .fillRect(px(wellX), px(wellY), 3, px(wellH))
   .fillRect(px(wellX+wellW-3), px(wellY), 3, px(wellH))
   .fillRect(px(wellX), px(wellY), px(wellW), 4);
  const steps = 8;
  const treadH = Math.floor(wellH/steps) - 3;
  const treadW = wellW - 10;
  const baseX  = wellX + 5;
  for(let i=0;i<steps;i++){
    const ty = wellY + 4 + i*(treadH+3);
    const offset = i*3;
    g.fillStyle(0x7a5232,1).fillRect(px(baseX+offset), px(ty), px(treadW), px(treadH));
    g.fillStyle(0x5c3d23,1).fillRect(px(baseX+offset), px(ty+treadH-2), px(treadW), 2);
    g.fillStyle(0xa07349,0.35).fillRect(px(baseX+offset+2), px(ty+2), px(treadW-4), 1);
  }
  g.fillStyle(0x4a3422,1)
   .fillRect(px(wellX+2), px(wellY), 4, px(wellH))
   .fillRect(px(wellX+wellW-6), px(wellY), 4, px(wellH));
  g.fillStyle(0x000000,0.18).fillRect(px(wellX-4), px(wellY-2), px(wellW+8), 8);

  // props
  Game.sprites.door   = scene.add.image(ZONES.LEFT_DOOR.left, FLOOR_Y.ground - SIZES.DOOR_H, 'door_detail').setOrigin(0,0);
  Game.sprites.window = scene.add.image(ZONES.RIGHT_WINDOW.left, FLOOR_Y.ground - SIZES.WIN_H, 'win_detail').setOrigin(0,0);
  scene.add.image(ZONES.STOVE.left, FLOOR_Y.ground - SIZES.STOVE_H, 'stove_body').setOrigin(0,0);
  scene.add.image(ZONES.GUN_CHEST.left, FLOOR_Y.upper - SIZES.CHEST_H, 'chest').setOrigin(0,0);

  createStoveFlame(scene);
  createRaygunPickup(scene);
}
function createStoveFlame(scene){
  if(stoveFlame) { stoveFlame.destroy(); stoveFlame=null; }
  const x=ZONES.STOVE.left+SIZES.STOVE_W/2, y=FLOOR_Y.ground-8;
  stoveFlame=scene.add.container(x,y).setDepth(3);
  const o=scene.add.graphics(); o.fillStyle(0xff9248,1).fillTriangle(-7,5,0,-8,7,5); stoveFlame.add(o);
  const m=scene.add.graphics(); m.fillStyle(0xffb86c,1).fillTriangle(-5,4,0,-6,5,4); stoveFlame.add(m);
  const i=scene.add.graphics(); i.fillStyle(0xffe38a,1).fillTriangle(-3,3,0,-4,3,3); stoveFlame.add(i);
  const glow=scene.add.graphics(); glow.fillStyle(0xffb86c,0.25).fillEllipse(0,0,14,8); glow.setBlendMode(Phaser.BlendModes.ADD); stoveFlame.add(glow);
  stoveFlameTween=scene.tweens.add({targets:stoveFlame,scaleY:{from:0.9,to:1.15},y:{from:y,to:y-2},duration:180,yoyo:true,repeat:-1});
}
function stopStoveFlame(){ if(stoveFlameTween){stoveFlameTween.stop();stoveFlameTween=null;} if(stoveFlame){stoveFlame.destroy();stoveFlame=null;} }
function createRaygunPickup(scene){
  if(raygunPickup){raygunPickup.destroy();raygunPickup=null;}
  const x=ZONES.GUN_CHEST.left+SIZES.CHEST_W/2, y=FLOOR_Y.upper-SIZES.CHEST_H-6;
  raygunPickup=scene.add.image(x,y,'raygun').setOrigin(0.5,1).setDepth(3);
  scene.tweens.add({targets:raygunPickup,y:y-4,duration:700,yoyo:true,repeat:-1});
  sparkleTimer=scene.time.addEvent({delay:140,loop:true,callback:()=>{
    if(!raygunPickup) return; const s=scene.add.image(x+Phaser.Math.Between(-10,10),y-Phaser.Math.Between(0,8),'sparkle').setDepth(3);
    scene.tweens.add({targets:s,alpha:{from:1,to:0},y:s.y-6,duration:300,onComplete:()=>s.destroy()});
  }});
}
function hideRaygunPickup(){ if(sparkleTimer){sparkleTimer.remove();sparkleTimer=null;} if(raygunPickup){raygunPickup.destroy();raygunPickup=null;} }

/* =========================
   Game singleton (state + flow)
========================= */
const Game = {
  scene:null, state:STATES.REST, restMode:'intro',
  player:null, playerShadow:null, bullets:null, enemies:null, hasGun:false,
  houseHP:Config.HOUSE_MAX_HP, insurancePct:0, _hitGfx:null,
  sprites:{door:null,window:null},
  bulletDmgMult:1, playerSpeedMult:1, enemyHpMult:1, enemySpeedMult:1,
  quizPool: shuffled(QUIZ), currentQuiz:null, quizShownAt:0,
  QUIZ_LOCK_MS: 3000,

  create(scene){
    this.scene = scene;
    scene.cameras.main.setBackgroundColor(Config.COLORS.bg);
    makeGeneratedTextures(scene);
    drawHouse(scene);

    this.player=Entities.makePlayer(scene);
    this.playerShadow=scene.add.image(this.player.x,this.player.y+16,'shadow').setDepth(0.5);
    this.bullets=scene.physics.add.group(); this.enemies=scene.physics.add.group();
    scene.physics.add.overlap(this.bullets,this.enemies,(b,e)=>{ b.destroy(); e.hp -= (1*this.bulletDmgMult); if(e.hp<=0) e.destroy(); });

    this.cursors=scene.input.keyboard.createCursorKeys();
    this.keyA=scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A);
    this.keyS=scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S);

    this.keyA.on('down', ()=>{
      if(this.state===STATES.PREP) Tasks.begin(scene,this.player);
      else if(this.state===STATES.PLAY) Combat.shoot(scene);
      else if(this.state===STATES.REST) this.answerQuiz(true);
    });
    this.keyS.on('down', ()=>{ if(this.state===STATES.REST) this.answerQuiz(false); });
    this.keyA.on('up', ()=>{ if(this.state===STATES.PREP) Tasks.cancelHold(); });

    scene.input.keyboard.on('keydown-R', ()=> scene.scene.restart());

    UI.init(scene); UI.setTasksText(Tasks.text());
    this.startRest('intro');
  },

  update(time,delta){
    if(this.state===STATES.OVER || this.state===STATES.COMPLETE) return;
    const p=this.player, c=this.cursors; p.body.setVelocity(0);
    const speed = Config.PLAYER_SPEED * this.playerSpeedMult;
    if(c.left.isDown){ p.body.setVelocityX(-speed); p.setFlipX(true); }
    else if(c.right.isDown){ p.body.setVelocityX(speed); p.setFlipX(false); }
    p.x=Math.max(PLAYER_MIN_X,Math.min(PLAYER_MAX_X,p.x));
    if(p.body.velocity.x!==0) p.anims.play('walk',true); else { p.anims.stop(); p.setTexture('p0'); }
    const near=Math.abs(p.x-(ZONES.STAIRS.left+ZONES.STAIRS.w/2))<=ZONES.STAIRS.w/2;
    if(near){ if(c.up.isDown) p.y=FLOOR_Y.upper-14; else if(c.down.isDown) p.y=FLOOR_Y.ground-14; }
    if(this.playerShadow){ this.playerShadow.x=p.x; this.playerShadow.y=(p.y===FLOOR_Y.upper-14)?(FLOOR_Y.upper+2):(FLOOR_Y.ground+2); }

    if(this.state===STATES.PREP) Tasks.tick(this.scene,this.player);

    if(this.state===STATES.PLAY){
      this.enemies.getChildren().forEach(e=>{
        const tx=e.side==='left'?Config.HOUSE_X:Config.HOUSE_X+Config.HOUSE_W, dir=Math.sign(tx-e.x);
        if(Math.abs(e.x-tx)<4){
          if(!e._tick || time - e._tick > 800){ const dmg=(e.hp>=3?3:2); Audio.damage(); this.damageHouse(dmg); e._tick=time; }
        } else { e.x += dir * e.speed * (delta/1000); }
      });
    }
  },

  setCountdown(t,s,d){ UI.setCountdown(t,s,d); },

  startRest(mode){
    this.state=STATES.REST; this.restMode=mode;
    UI.setTasksText(''); UI.setPrepIndicators(false); UI.hideHoldProgress();

    if(mode==='between'){
      if(this.quizPool.length===0) this.quizPool = shuffled(QUIZ);
      this.currentQuiz = this.quizPool.pop();
      UI.showQuiz(this.scene, { q:this.currentQuiz.q });
      this.quizShownAt = performance.now();
    } else { UI.hideQuiz(); }

    const msg = mode==='intro' ? 'Get oriented' : 'Resting... next wave';
    this.setCountdown(`${msg} — {s}s`, Config.REST_SECONDS, ()=>{
      UI.hideQuiz();
      if(mode==='intro') this.startPrep();
      else if(mode==='between' && this.state!==STATES.COMPLETE){ this.state=STATES.PLAY; Audio.wave(); Waves.start(this.scene); }
    });
  },

  answerQuiz(pressedYes){
    if(this.state!==STATES.REST || this.restMode!=='between' || !this.currentQuiz) return;
    if(performance.now() - this.quizShownAt < this.QUIZ_LOCK_MS) return;

    const yesIsCorrect = this.currentQuiz.ans;
    const isCorrect = (pressedYes === yesIsCorrect);
    if(isCorrect){
      Audio.correct();
      const r = Math.random();
      if(r<0.34){
        this.houseHP = Math.min(Config.HOUSE_MAX_HP, this.houseHP + Math.round(Config.HOUSE_MAX_HP*0.10));
        UI.setBar(UI.houseBar, this.houseHP, 'House');
        this.flashCenterText('+10% House Heal', '#2bff5a');
      } else if(r<0.67){
        this.bulletDmgMult *= 1.15;
        this.flashCenterText('+15% Bullet Damage', '#2bff5a');
      } else {
        this.playerSpeedMult *= 1.10;
        this.flashCenterText('+10% Player Speed', '#2bff5a');
      }
    } else {
      Audio.wrong();
      if(Math.random()<0.5){ this.enemyHpMult *= 1.10; this.flashCenterText('Thieves +10% Tougher', '#ff5c66'); }
      else { this.enemySpeedMult *= 1.20; this.flashCenterText('Thieves +20% Faster', '#ff5c66'); }
    }
    UI.hideQuiz();
    this.currentQuiz = null;
  },

  flashCenterText(msg, color){
    const t=this.scene.add.text(Config.WIDTH/2, Config.HEIGHT/2, msg, {
      fontFamily:'"Press Start 2P", monospace', fontSize:'12px', color: color || '#1b1e24', backgroundColor:'#ffffff'
    }).setOrigin(0.5).setPadding(6,4,6,4).setDepth(999);
    this.scene.tweens.add({targets:t,alpha:{from:1,to:0},y:'-=16',duration:900,onComplete:()=>t.destroy()});
  },

  startPrep(){ this.state=STATES.PREP; UI.setTasksText(Tasks.text()); UI.setPrepIndicators(true); this.setCountdown('PREP — {s}s', Config.PREP_SECONDS, ()=> this.endPrep()); },

  endPrep(){
    UI.setPrepIndicators(false); Tasks.cancelHold();
    if(!Tasks.state.stove){ Audio.damage(); this.gameOver('House fire! You forgot the stove.\nPress R to retry.'); this.state=STATES.OVER; return; }
    this.state=STATES.PLAY; Audio.wave(); Waves.start(this.scene);
  },

  endLevelText(scene){
    const RED = 0xE2231A;
    const overlay = scene.add.graphics({ x: 0, y: 0 }).setDepth(999);
    overlay.fillStyle(RED, 1).fillRect(0, 0, Config.WIDTH, Config.HEIGHT);

    const titleShadow = scene.add.text(
      Config.WIDTH/2+2, 90+2, 'Insurance has you covered',
      { fontFamily:'"Press Start 2P", monospace', fontSize:'20px', color:'#000000', align:'center' }
    ).setOrigin(0.5).setDepth(1000).setAlpha(0.35);

    const title = scene.add.text(
      Config.WIDTH/2, 90, 'Insurance has you covered',
      { fontFamily:'"Press Start 2P", monospace', fontSize:'20px', color:'#ffffff', align:'center' }
    ).setOrigin(0.5).setDepth(1000);

    const paragraph =
      "Insurance is a safety net: lots of people pay small amounts called premiums into a pool. " +
      "When someone has a covered loss—like a fire or theft—the pool helps pay to repair or replace " +
      "what was damaged. A home policy typically covers the structure, many belongings, and even " +
      "liability if a guest gets hurt, up to your limits and after your deductible. Managing risks " +
      "at home (locking doors, turning off stoves, using alarms) helps prevent losses and can lower " +
      "costs. That’s why, when your house took damage, your policy stepped in—turning a big, scary " +
      "bill into a manageable setback.";

    const body = scene.add.text(
      Config.WIDTH/2, 180,
      paragraph,
      { fontFamily:'"Press Start 2P", monospace', fontSize:'12px', color:'#ffffff', align:'center', wordWrap:{ width: Config.WIDTH - 120 } }
    ).setOrigin(0.5,0).setDepth(1000);

    const prompt = scene.add.text(
      Config.WIDTH/2, Config.HEIGHT - 80, 'Press R to replay',
      { fontFamily:'"Press Start 2P", monospace', fontSize:'14px', color:'#ffffff' }
    ).setOrigin(0.5).setDepth(1000).setAlpha(0);

    scene.time.delayedCall(10000, () => {
      scene.tweens.add({ targets: prompt, alpha: 1, duration: 300 });
      scene.tweens.add({ targets: prompt, alpha: { from: 1, to: 0.7 }, yoyo: true, repeat: -1, duration: 800 });
      scene.input.keyboard.once('keydown-R', ()=> scene.scene.restart());
    });

    this.state = STATES.COMPLETE;
  },

  gameOver(t){
    const s=this.scene;
    s.add.text(Config.WIDTH/2, Config.HEIGHT/2, t, {
      fontFamily:'"Press Start 2P", monospace', fontSize:'14px', color:'#e5e9f0', align:'center', wordWrap:{ width: Config.WIDTH-80 }
    }).setOrigin(0.5);
    s.input.keyboard.once('keydown-R', ()=> s.scene.restart());
  },

  damageHouse(a){
    this.houseHP=Math.max(0,this.houseHP-a); UI.setBar(UI.houseBar,this.houseHP,'House');
    this.insurancePct=Math.min(100,this.insurancePct+a); UI.setBar(UI.insBar,this.insurancePct,'Insurance');

    if(!this._hitGfx){ this._hitGfx=this.scene.add.graphics({x:0,y:0}).setDepth(999); }
    const g=this._hitGfx; g.clear(); g.lineStyle(6,0xff5c66,1).strokeRect(Config.HOUSE_X-2,Config.HOUSE_Y-2,Config.HOUSE_W+4,Config.HOUSE_H+4);
    this.scene.tweens.add({targets:g,alpha:{from:1,to:0},duration:140,onComplete:()=>{g.clear();g.alpha=1;}});

    if(this.insurancePct>=100 && this.state===STATES.PLAY && !Effects.shock.active){ Audio.blast(); Effects.trigger(this.scene); }
    if(this.houseHP<=0 && this.state===STATES.PLAY && this.insurancePct<100){ this.state=STATES.OVER; this.gameOver('House destroyed! Press R to retry.'); }
  }
};

/* =========================
   Scenes
========================= */
class IntroScene extends Phaser.Scene{
  constructor(){ super('Intro'); }
  create(){
    this.cameras.main.setBackgroundColor('#1b0b2e');
    // Background: purple gradient + stars + faint icons
    const g = this.add.graphics();
    const top=Phaser.Display.Color.HexStringToColor('#6f2dbd').color;
    const bot=Phaser.Display.Color.HexStringToColor('#1b0b2e').color;
    const bands=24, bh=Math.ceil(Config.HEIGHT/bands);
    for(let i=0;i<bands;i++){ const col=lerpColorInt(top,bot,i/(bands-1)); g.fillStyle(col,1).fillRect(0,i*bh,Config.WIDTH,bh); }
    for(let s=0;s<120;s++){ const sx=Phaser.Math.Between(6,Config.WIDTH-6), sy=Phaser.Math.Between(6,Config.HEIGHT-6), a=Phaser.Math.FloatBetween(0.5,1); g.fillStyle(0xffffff,a).fillRect(sx,sy,2,2); }
    const icons = this.add.graphics();
    const drawShield = (x,y)=>{ icons.fillStyle(0xffffff,0.12).fillRect(x,y,10,2).fillRect(x+1,y+2,8,6).fillRect(x+2,y+8,6,4).fillRect(x+3,y+12,4,3); };
    const drawHouse = (x,y)=>{ icons.fillStyle(0xffffff,0.12).fillRect(x+4,y,8,4).fillRect(x,y+4,16,12).fillRect(x+6,y+8,4,8); };
    const drawHeart = (x,y)=>{ icons.fillStyle(0xffffff,0.12).fillRect(x+2,y,4,4).fillRect(x+8,y,4,4).fillRect(x,y+4,16,4).fillRect(x+2,y+8,12,4).fillRect(x+4,y+12,8,4).fillRect(x+6,y+16,4,4); };
    const drawCoin  = (x,y)=>{ icons.fillStyle(0xffffff,0.12).fillRect(x+1,y,14,2).fillRect(x,y+2,16,12).fillRect(x+1,y+14,14,2); };
    for(let y=40;y<Config.HEIGHT;y+=60){ for(let x=40;x<Config.WIDTH;x+=80){ const r=(x+y)%4; if(r===0) drawShield(x,y); else if(r===1) drawHouse(x,y); else if(r===2) drawHeart(x,y); else drawCoin(x,y); } }
    this.add.renderTexture(0,0,Config.WIDTH,Config.HEIGHT).draw(icons,0,0); icons.destroy();

    // Title centered (with drop shadow)
    const titleText = 'Policy Hero';
    const titleShadow = this.add.text(Config.WIDTH/2+3, 36+3, titleText,
      { fontFamily:'"Press Start 2P", monospace', fontSize:'36px', color:'#000000' })
      .setOrigin(0.5,0).setAlpha(0.35);
    const title = this.add.text(Config.WIDTH/2, 36, titleText,
      { fontFamily:'"Press Start 2P", monospace', fontSize:'36px', color:'#ffffff' })
      .setOrigin(0.5,0);

    // Prompt centered + animated
    const prompt = this.add.text(Config.WIDTH/2, Config.HEIGHT - 120, 'Press SPACE to play',
      { fontFamily:'"Press Start 2P", monospace', fontSize:'14px', color:'#ffffff' }).setOrigin(0.5);
    this.tweens.add({ targets: prompt, y:{from:prompt.y,to:prompt.y-10}, alpha:{from:1,to:0.6}, duration:900, yoyo:true, repeat:-1, ease:'Sine.easeInOut' });

    // Start PlayScene on SPACE
    this.input.keyboard.once('keydown-SPACE', ()=>{
      this.cameras.main.fadeOut(300,0,0,0);
      this.time.delayedCall(320, ()=> this.scene.start('Play'));
    });
  }
}

class PlayScene extends Phaser.Scene{
  constructor(){ super('Play'); }
  create(){ Game.create(this); }
  update(t,d){ Game.update(t,d); }
}

/* =========================
   Boot Phaser
========================= */
window.addEventListener('load', ()=>{
  new Phaser.Game({
    type: Phaser.AUTO,
    parent: 'game',
    width: Config.WIDTH,
    height: Config.HEIGHT,
    pixelArt: true,
    physics: { default:'arcade', arcade:{ gravity:{y:0}, debug:false } },
    scene: [IntroScene, PlayScene]
  });
});

/* =========================
   (End of IIFE)
========================= */
})();
</script>
</body>
</html>
